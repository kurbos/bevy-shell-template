name: release

on:
  push:
    tags:
      - "v*.*.*"

env:
  DOCKER_IMG_NAME: my-game

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Pull build cache
        id: cache-build
        uses: actions/cache@v3
        with:
          path: ./target
          key: release-windows-${{ env.VERSION }}
      - name: Checkout code
        if: steps.cache-build.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
      - name: Build
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: |
          cd ./launchers/native
          cargo build --release

  build-mac:
    runs-on: macos-latest
    steps:
      - name: Pull build cache
        id: cache-build
        uses: actions/cache@v3
        with:
          path: ./target
          key: release-mac-${{ env.VERSION }}
      - name: Checkout code
        if: steps.cache-build.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
      - name: Build
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: |
          cd ./launchers/native
          cargo build --release

  build-ubuntu:
    runs-on: ubuntu-latest
    steps:
      - name: Pull build cache
        id: cache-build
        uses: actions/cache@v3
        with:
          path: ./target
          key: release-ubuntu-${{ env.VERSION }}
      - name: Checkout code
        if: steps.cache-build.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
      - name: Get dependencies
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: sudo apt install libasound2-dev libudev-dev pkg-config
      - name: Build
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: |
          cd ./launchers/native
          cargo build --release

  build-wasm:
    runs-on: ubuntu-latest
    steps:
      - name: Pull build cache
        id: cache-build
        uses: actions/cache@v3
        with:
          path: ./launchers/wasm/
          key: release-wasm-${{ env.VERSION }}
      - name: Checkout code
        if: steps.cache-build.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
      - name: Install Trunk
        if: steps.cache-build.outputs.cache-hit != 'true'
        uses: jetli/trunk-action@v0.1.0
        with:
          version: "latest"
      - name: Trunk Build
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: |
          cd ./launchers/wasm
          trunk build

  release-windows:
    needs: build-windows
    runs-on: ubuntu-latest
    steps:
      - name: Pull cache
        uses: actions/cache@v3
        with:
          path: ./target
          key: release-windows-${{ env.VERSION }}
      - name: Rename build
        run: |
          mv ./target/release/my-game ./windows-latest.exe
      - name: Upload
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          files: ./windows-latest.exe

  release-mac:
    needs: build-mac
    runs-on: ubuntu-latest
    steps:
      - name: Pull cache
        uses: actions/cache@v3
        with:
          path: ./target
          key: release-mac-${{ env.VERSION }}
      - name: Rename build
        run: |
          mv ./target/release/my-game ./mac-latest
      - name: Upload
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          files: ./mac-latest

  release-ubuntu:
    needs: build-ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Pull cache
        uses: actions/cache@v3
        with:
          path: ./target
          key: release-ubuntu-${{ env.VERSION }}
      - name: Rename build
        run: |
          mv ./target/release/my-game ./ubuntu-latest
      - name: Upload
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          files: ./ubuntu-latest

  release-github-pages:
    needs: build-wasm
    runs-on: ubuntu-latest
    steps:
      - name: Pull cache
        uses: actions/cache@v3
        with:
          path: ./launchers/wasm/dist
          key: release-wasm-${{ env.VERSION }}
      - name: Deploy, Github Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./launchers/wasm/dist

  release-docker-server:
    needs: build-wasm
    runs-on: ubuntu-latest
    steps:
      - name: Pull cache
        uses: actions/cache@v3
        with:
          path: ./launchers/wasm/.
          key: release-wasm-${{ env.VERSION }}
      # Qemu is an emulator for alternative architectures
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      # Buildx allows us to build for several architectures
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      # Login to DockerHub - Setup your secrets! Check out the README.
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # Extract the version from the tag
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      # Push HTTP server Docker image
      - name: Push to DockerHub
        uses: docker/build-push-action@v3
        with:
          context: ./launchers/wasm/.
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMG_NAME }}:${{ steps.get_version.outputs.VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMG_NAME }}:latest
