name: release

on:
  push:
    tags:
      - "v*.*.*"

env:
  RELEASE_NAME: my_game
  PUBLIC_URL: /bevy-shell-template/

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version-tag.outputs.VERSION }}
    steps:
      - name: Get tagged version
        id: version-tag
        run: echo "::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}"

  release-windows:
    needs: setup
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build
        run: |
          cd ./launchers/native
          cargo build --release
      - name: Rename
        run: |
          mv ./target/release/native-launcher.exe ./${{ env.RELEASE_NAME }}-${{ needs.setup.outputs.version }}.windows.exe
      - name: Upload
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          files: ./${{ env.RELEASE_NAME }}-${{ needs.setup.outputs.version }}.windows.exe

  release-mac:
    needs: setup
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build
        run: |
          cd ./launchers/native
          cargo build --release
      - name: Rename
        run: |
          mv ./target/release/native-launcher ./${{ env.RELEASE_NAME }}-${{ needs.setup.outputs.version }}.darwin
      - name: Upload
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          files: ./${{ env.RELEASE_NAME }}-${{ needs.setup.outputs.version }}.darwin

  release-ubuntu:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Get dependencies
        run: |
          sudo apt install libasound2-dev libudev-dev pkg-config
      - name: Build
        run: |
          cd ./launchers/native
          cargo build --release
      - name: Rename
        run: |
          mv ./target/release/native-launcher ./${{ env.RELEASE_NAME }}-${{ needs.setup.outputs.version }}.linux
      - name: Upload
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          fail_on_unmatched_files: true
          files: ./${{ env.RELEASE_NAME }}-${{ needs.setup.outputs.version }}.linux

  release-wasm:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Trunk
        uses: jetli/trunk-action@v0.1.0
        with:
          version: "latest"
      - name: Trunk Build
        run: |
          cd ./launchers/wasm
          trunk build --public-url ${{ env.PUBLIC_URL }}
      ## Deploy - GitHub Pages
      - name: Deploy, Github Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./launchers/wasm/dist/
      ## Deploy - Docker Server
      # Qemu is an emulator for alternative architectures
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      # Buildx allows us to build for several architectures
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      # Login to DockerHub - Setup your secrets! Check out the README.
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # Push HTTP server Docker image
      - name: Push to DockerHub
        uses: docker/build-push-action@v3
        with:
          context: ./launchers/wasm
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.RELEASE_NAME }}:latest
